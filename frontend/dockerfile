# reference
# https://dev.to/code42cate/minimizing-nuxt-3-docker-images-5d5g

# Use a large Node.js base image to build the application and name it "build"
FROM node:18-alpine as build

ARG dir=frontend
CMD echo "Current directory is ${dir}"

# 设置工作目录
# WORKDIR /app
WORKDIR /${dir}

# Copy the package.json and package-lock.json files into the working directory before copying the rest of the files
# This will cache the dependencies and speed up subsequent builds if the dependencies don't change
# COPY package*.json /app
COPY package*.json /${dir}

# npm / yarn / cnpm install
RUN pnpm install

COPY . /${dir}

RUN pnpm run build

# Instead of using a node:18-alpine image, we are using a distroless image. These are provided by google: https://github.com/GoogleContainerTools/distroless
FROM gcr.io/distroless/nodejs:18 as prod

ARG dir=frontend

# WORKDIR /app
WORKDIR /${dir}

# Copy the built application from the "build" image into the "prod" image
# COPY --from=build /app/.output /app/.output
COPY --from=build /${dir}/.output /${dir}/.output

# Since this image only contains node.js, we do not need to specify the node command and simply pass the path to the index.mjs file!
CMD ["/${dir}/.output/server/index.mjs"]